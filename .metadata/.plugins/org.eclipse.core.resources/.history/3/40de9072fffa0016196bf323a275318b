package com.taotao.common.pojo;

import java.io.IOException;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * 淘淘商城自定义响应结构
 * 
 * @author fxq
 *
 */
public class TaotaoResult {
	// ObjectMapper类是Jackson库的主要类。它提供一些功能将转换成Java对象匹配JSON结构，反之亦然。
	// 它使用JsonParser和JsonGenerator的实例实现JSON实际的读/写。
	private static final ObjectMapper MAPPER = new ObjectMapper();

	// 响应业务状态
	private Integer status;
	// 响应信息
	private String msg;
	// 响应中的数据
	private Object data;

	// 空的构造函数;
	public TaotaoResult() {
	}

	// 带一个参数的构造函数
	public TaotaoResult(Object data) {
		this.status = 200;
		this.msg = "OK";
		this.data = data;
	}

	// 带三个参数的构造函数
	public TaotaoResult(Integer status, String msg, Object data) {
		this.status = status;
		this.msg = msg;
		this.data = data;

	}

	public static TaotaoResult build(Integer status, String msg, Object data) {
		return new TaotaoResult(status, msg, data);
	}

	public static TaotaoResult ok(Object data) {
		return new TaotaoResult(data);
	}

	public static TaotaoResult ok() {
		return new TaotaoResult(null);
	}

	public Integer getStatus() {
		return status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}

	public String getMsg() {
		return msg;
	}

	public void setMsg(String msg) {
		this.msg = msg;
	}

	public Object getData() {
		return data;
	}

	public void setData(Object data) {
		this.data = data;
	}

	/**
	 * 将json结果集转化为TaotaoResult对象;
	 * 
	 * @param jsonData
	 * @param clazz
	 * @Class<T>在实例化的时候，T要替换成具体类 @ Class<?>它是个通配泛型，?可以代表任何类型
	 *                           http://tool.oschina.
	 *                           net/apidocs/apidoc?api=jackson-1.9.9 参考文档
	 * @return
	 */
	public static TaotaoResult formatToPojo(String jsonData, Class<?> clazz) {
		try {

			if (clazz == null) {
				return MAPPER.readValue(jsonData, TaotaoResult.class);
			}

			JsonNode jsonNode = MAPPER.readTree(jsonData);
			JsonNode data = jsonNode.get("data");
			Object obj = null;
			if (clazz != null) {
				if (data.isObject()) {
					obj = MAPPER.readValue(data.traverse(), clazz);
				} else if (data.isTextual()) {
					obj = MAPPER.readValue(data.asText(), clazz);
				}
			}

			return build(jsonNode.get("status").intValue(), jsonNode.get("msg")
					.asText(), obj);

		} catch (Exception e) {
			return null;
		}

	}

	public static TaotaoResult format(String json) {
		try {
			return MAPPER.readValue(json, TaotaoResult.class);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
